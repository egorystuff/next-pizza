generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String   @unique
  password String
  role     UserRole @default(USER)
  verified DateTime

  provider   String?
  providerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart             Cart?
  orders           Order[]
  verificationCode VerificationCode?
}

// --------------------------------------------------------------------------------

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products Product[]
}

// --------------------------------------------------------------------------------

model Product {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  ingredients Ingredient[]

  items ProductItem[]
}

// --------------------------------------------------------------------------------

model ProductItem {
  id Int @id @default(autoincrement())

  price     Int
  size      Int?
  pizzaType Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  cartItems CartItem[]
}

// --------------------------------------------------------------------------------

model Ingredient {
  id Int @id @default(autoincrement())

  name     String
  price    Int
  imageUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products  Product[]
  cartItems CartItem[]
}

// --------------------------------------------------------------------------------

model Cart {
  id Int @id @default(autoincrement())

  totalAmount Int @default(0)

  token String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  items CartItem[]
}

// --------------------------------------------------------------------------------

model CartItem {
  id Int @id @default(autoincrement())

  quantity Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  ingredients Ingredient[]
}

// --------------------------------------------------------------------------------

model Order {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  token String

  totalAmount Int
  status      OrderStatus
  paymentId   String?

  items Json

  fullName String
  address  String
  email    String
  phone    String
  comment  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --------------------------------------------------------------------------------

model VerificationCode {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  code String @unique

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

// --------------------------------------------------------------------------------

model Story {
  id              Int    @id @default(autoincrement())
  previewImageUrl String

  items StoryItem[]

  createdAt DateTime @default(now())
}

// --------------------------------------------------------------------------------

model StoryItem {
  id Int @id @default(autoincrement())

  storyId Int
  story   Story @relation(fields: [storyId], references: [id])

  sourceUrl String

  createdAt DateTime @default(now())
}

// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}
